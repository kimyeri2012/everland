*웹 브라우저: 인터넷 화면을 보여주는 프로그램
(ex: 크롬, 파이어폭스, 사파리, 오페라,엣지)
크로스 브라우징 - 홈페이지 제작 시 여러 사용자 환경별로 테스트해보고 문제 발생 시 해결 
--------------------------------------------------------------
*HTML(hyper text markup language): 웹 페이지를 작성하는 언어
웹 문서/ html 문서/ html 페이지
--------------------------------------------------------------
*웹 페이지 생성
    1. 저장할 때 확장자는 반드시 .html 또는 .htm
    2. 가장 먼저 보여질 화면의 이름은 반드시 "index.html"
KWCAG  2.1 - 웹 접근성 지침 
--------------------------------------------------------------
*표준화 페이지 기본 형식(표준과 접근성 준수)
<!DOCTYPE html> <-- 문서 형식
<html lang= "ko"> <-- 기본 언어 설정
 <head>
   <meta charset="utf-8"> <-- 문자셋
   <title>문서 제목</title> <-- 페이지 제목
 </head>

 <body>

 </body>
</html>
--------------------------------------------------------------
*웹페이지 개발 방법

1. 분리해서 코딩
    - 구조(Structure): html
    - 표현(Presentation): css
    - 동작(Behavior): javascript

*내용 작성
    1. 이해하기 쉽게
    2. 논리적으로
    3. 의미있게
    4. 구조적으로
    5. 콘텐트는 "제목+내용"으로 작성
    6. 디자인에는 없는 요소들도 내용 전달에 필요하면 추가 작성
    7. 중요도, 선호도, 사용빈도가 높은 순으로 

*코딩 순서
    1. 내용 작성
    2. 마크업: 용도나 목적에 맞는 태그 작성
    3. 콘텐트 블럭
    4. css 초기화
    5. css 작성
    6. 스크립트 적용
    7. 프로그래밍 적용
    8. 표준/접근성 검사
    9. 수정/보안

---------------------------------------------------------------------------
백엔드(로그인, 회원관리) / 리엑트 위주 공부 / 백엔드-> 프론트로 바꿔서 공부

일반 형태의 홈페이지(여러개의 보여지는 화면) --> SPA(Single Page Application)

php 언어 사용
---------------------------------------------------------------------------
*주요 태그

1. meta
    - 문서의 속성 정의
    - head 태그 내에 작성

2. title
    - 문서의 제목 정의
    - head 태그 내에 작성

3. h(Heading)
    -제목 표시
    -h1(큰 제목) ~ h6(작은 제목)
    -줄 바꿈+볼드체 적용

4. p(paragraph)
    -문단 구분

5.br(break)
    -줄 바꿈

&nbsp 띄어쓰기

<명령어   속성  ="속성값">

~xhtml 1.0 : < tag    property: "vaule">

html5 ~ : < element   attribute: "value">

</명령어>

6. 목록태그

    -ul(unordered list):비순차 목록
    -ol(ordered list): 순차 목록
    -dl(definition list): 정의 목록

    -li(listen item): ol,ul 의 항목

    -dt(definition term): 목록에 대한 정의
    -dd(definition description): 정의 목록의 항목 

7. a(Anchor)
     생성

8. img
    - 웹 페이지에 이미지 불러오기

9. div
    - 여러 개의 요소를 그룹화
----------------------------------------------------------------
*HTML

1. "<"와 ">" 사이에 명령어(tag,element)작성

2. 시작태그와 종료태그로 구성

3. 태그는 중첩 가능하며 종료 태그는 나증에 작성한 태그 먼저 작성
    - <div><p><a><div></p></a> (X)
    - <div><p><a></a></p><div> (O)

4. 종료태그가 없는 태그 :br, img, hr, meta, input,,,

5. 반드시 종료 선언(xhtml)
    - 종료 태그가 없는 태그: 태그 뒤에 "/" 표기
    ex)
        <br> ---------------> <br />
        <img src=""> --------------><img src="" />
    - 종료 태그 생략 가능한 태그: 반드시 종료 태그 작성

6. 디버깅을 하지 않음 

7. 반드시 대소문자 구분(xhtml) html5에도 유효
    - 모든 태그와 속성은 소문자로만 작성

8. 문서 상단에 반드시 DOCTYPE 선언

&copy- 기호 
&amp - &
&nbsp- 띄어쓰기

------------------------------------------------------------------------
*속성의 특징

1. 태그와 속성, 속성과 속성은 공백으로 구분 
ex) <a href="#">---->o
    <ahref="#">----> x

2. 여러 개의 속성을 사용할 수 있지만(A)
    ex) A: <img src= "/" width="길이" height="높이"> ----> o

    같은 속성을 두 번 이상 사용 불가(B)
    B: <img src= "/" width="300" width="400"> ----> X

3. 하나의 속성에는 값은 한 개만 지정
    ex) <img src= "/" width="300,400"> ----> X

4. 속성값은 원래의 이름이 한글인 경우를 제외하고 한글 사용 불가
    ex) <img width="300"> ---> o
        <img width="삼백"> --->x

예외 태그 : meta
<meta name="keywords" content="영화, 한국영화, 외국영화">

5. 속성값에는 "" 생략 가능 but 하지 말기!
(xhtml에서는 생략 불가)

-------------------------------------------------------------------------
콘텐츠를 옮겨 적을 때 우선순위 순으로 작성
(대부분 로고 -> 주요메뉴)
듣는사람 보는사람 동일하게 이해할 수 있도록 작성
한줄 문장은 끝까지 작성 BUT 2줄 이상의 문장은 ... 작성
2중 ul 문을 선언할 때 제목 태그는 안써도 됨
1 depth 안에 2 depth 넣어주고 1 depth 의</li>닫기 
h1 태그부터 div 넣어주기
내용 없일 시 h 태그 없이 p로 가능
윈도우+R -> \\505-t
----------------------------------------------------------------
9/7
CMS
    word press
    cafe24
    makeshop
    godo malle

9/13
    <div id="header">
        ~~~~~

    </div>

    <div id="content">
        ~~~~~

    </div>

    <div id="footer">
        ~~~~~

    </div>
----------------------------------------------------------------------
** 레이아웃 기본 구조 **
1. header
    - 상단 로고, GNB, topmenu 등
    - 주로 페이지 안내(이동)에 관한 요소 포함
    - GNB:Global Navigation Bar- 메뉴바

2. content(main)
    - 페이지병 내용, LNB, 배너, 게시판, 퀵메뉴 등
    - 해당 페이지에서 나타내고자 하는 내용 작성
    - LNB: Local Navigation Bar= 사이드 메뉴

3.footer
    - 회사나 사이트에 대한 정보
    - 각종 연락처, 관리자 정보, 약관 및 정책, 카피라이트 등

4. 기타요소(SNS,검색, 관련 사이트 등)는 필요한 위치에 추가
------------------------------------------------------------------
** HTML5의 Section요소 **
1. header
    -페이지의 독자적 요소
    - 로고, 네비게이션
    - 반드시 하나 이상의 제목 명시
    - header, footer,article, section 태그 사용 불가
    - 요소의 위치 무관

2. article
    -페이지 내용상 별개의 내용을 구성할 때 사용되는 섹션

3. Section요소
    - 단락, 이미지, 제목 등의 콘텐트를 묶어 더 큰 논리적 단위 형성
    -body 안에 들어 갈 수 있는 모든 요소 사용(header, footer포함)
    -class나 id 속성을 사용하여 섹션에 대한 특정정보(메타데이터)추가

4. main
    - 문서의 주요 내용 정의(요소 내부의 내용은 문서에 고유)
    - 문서 내에 한 번만 사용
    - article, aside, header,nav, footer요소의 하위에 사용 불가
    - 사이트 콘텐트, 저작권 정보, 사이트 로고, 검색 양식 등 모든 내용 포함 가능
5. nav
    - 페이지 링크, 내부 링크가 있는 섹션 마크업 시 사용
    - 메인 네비게이션이 있는 섹션에만 사용

6. aside
    - 본문 내용에 대한 추가적인 설명, 부수적 콘텐트 표시에 사용하는 태그

7. footer
    - 저작권, 개인정보 보호정책, 연락처 등의 콘텐트
    - 문서상의 위치 무관

8. figure
    - 이미지에 대한 캡션이나 설명을 위한 태그
    - 문서의 흐름에 영향을 주지 않는 콘텐트 마크업에도 사용
-------------------------------------------------------------
** 경로 (URL, Uniform Resource Location) **

1. 파일의 위치
    * 절대경로
        1. 최상위 디렉토리부터 순차적으로 이동하는 경로
        2. 드라이브명(c:,d:)이나 프로토콜(http://, ftp://)으로 시작
        3. 기준 파일의 위치에 상관없이 대상 파일의 경로가 동일
        4. 다른 사이트의 자원을 이용하는 경우

    *상대경로
        1. 기준 파일과 대상 파일의 위치에 따라 경로 설정

        2. 동일한 디렉토리에 있는 경우 -파일명.확장자

        3. 하위 디렉토리에 있는 경우
            -디렉토리명/ 파일명.확장자

        4. 상위 디렉토리에 있는 경우 
            -../:위로 * 1
            -../파일명.확장자
            *vscode에서는 내가 선택한 파일이 최상위 디렉토리

    5. 복합사용
-----------------------------------------------------------------------------
** 테이블(table) **
    1. 정보 전달에 활용

    * 특징 *
        1. 각 행의 셀 개수는 동일
        2. 같은 행에 있는 셀들은 높이가 동일
        3. 같은 열에 있는 셀들은 길이가 동일

    *관련 태그
        1. table:테이블의 외곽선 표시
        2. tr(Table Row):표의 행(줄) 구분
        3. td(Table Data cell):셀(칸) 생성
        4. th(Table Header):제목 셀 생성

    *테이블 관련 요소 속성
    합쳐지기 시작하는 점에서 작성 
        1. colspan:열 병합
        2. rowspan: 행 병합

    *접근성 향상을 위한 요소
        1. caption: 표의 제목
        2. summary(속성): 표의 제목
        3. thead / tfoot / tbody: 각 셀들의 역할 별 구분
            - thead:제목, tfoot: 결과, tbody: 내용
            -필요하지 않은 태그들은 생략 가능
            -태그 사용시 반드시 위 순서대로 사용
        4. id(속성): 제목 셀에 이름 부여
        5. headers(속성): 해당 셀의 제목셀 지정
--------------------------------------------------------------------
** 입력 양식(Wep Form) **
사용자가 페이지에 값을 전달하는 모든 형식

** form **
    1. 모든 양식은 <form> ~</form> 안에서 작성
    1. 모든 양식은 이름(name AND id)입력
    3. 대부분의 양식은 <input> 태그의 "type" 속성으로 정의 
        <input type = "종류 선언">
        *type 속성
        1. text
        2. password
        3. checkbox
        4. radio
        5. image
        6. file
        7. hidden
        8. button
        9. submit
        10.reset
    get- 빠르지만 보안성 낮음(데이터 노출)
    post- get보다 느리지만 보안성 높음(데이터 감춤)

    4. <select>: 콤보 상자 작성
        <select>
            <option>~</option>
            <option>~</option>
        </select>
    5. <textarea>: 텍스트를 여러 줄 입력하는 상자 작성
    6. <button>: 버튼 형식의 요소 작성(input 대신 사용)
        - <button type=" ">TEXT</button>
    7.fieldset: 양식의 소그룹
    8.legend: fieldset의 제목
    9.label: 필드와 텍스트의 그룹
    10.for(속성): 연결하고자 하는 필드의 id 값 작성
--------------------------------------------------------------------------
*CSS(Cascading Style Sheet)
웹 페이지의 표현(디자인)을 나타내는 언어
< A  B = "C" B="C".....>
selector(선택자: 누구한테){
    property(속성: 어떤 효과):value(값: 얼만큼);
    B:C;
}

*선택자

1.태그 선택자
    -html 태그에 직접 효과 적용
    - 해당 태그 작성 시 자동으로 효과 적용
2. 클래스 선택자
    -중복가능
    .name(효과)
    <요소 class="name">
3. 아이디 선택자
    -중복 불가
    #name(효과)
    <요소 id="name">
----------------------
4. 다중 선택자
A,B,C {효과}
5. 후손 요소 선택자
A B {효과}
6. 자식 요소 선택자
A > B {효과}
    ex)
        <body>

            <div> -img의 조상
                <p> -img의 조상, div의 자식
                    <a> -img의 부모, div의 후손
                        <img> -a의 자식, -div의 후손
                    </a>
                </p>

            </div>

        </body>

    1: a{color:red}
    2:div,a{color:red}
    3:div a {color:red}
    4:div>a {color:red}

    가:<a>TEXT</a>----------------------1 2
    나:<div><a>TEXT</a></div>-----------1 2 3 4
    다:<p><a>TEXT</a></p>---------------1 2
    라:<div><p><a>TEXT</a></p></div>----1 2 3
--------------------------------------------------------
** 스타일 적용 방법**

*내부 방식
    1. 내부 스타일
    <head>
    <style type="text"> <---스타일 선언문
    selector{property: value}
    </style>

    2. 인라인 방식
    <elem style = "property: value; property:value">

*외부 방식
selector{property:value}<----name.css로 저장, 선언문 생략

    1. 링크 방식
        <head>
        <link rel="stylesheet" type="text/css" href="name.css"

    2. 임포트 방식
        <head>
        <style type="text">
        @import"name.css"
        </style>

-------------------------------------------------------------
** 요소 레벨 **
태그가 어떻게 보여지는가에 대한 구분

1. 블록 레벨(Block Level)
    -독립된 행을 갖는 요소 집합
    - 크기 지정, 위치 조정 가능(*)
    - p, h1~h6,ul,ol,li,div,table..
    -다른 블록 레벨 요소와 인라인 요소 포함 가능
    -p, h, dt,address 같은 일부 요소는 다른 블록 포함 불가

2. 인라인 레벨(Inline Level)
    -범위 표시 요소의 집합
    -크기(예외:img), 위치 조정 불가
    -a, em,strong,img,span...
    -블록 레벨 요소는 포함할 수 없고 인라인 요소만 포함 가능
    -html5 이후 a요소는 블럭 포함 가능
    -높이 속성 사용 불가


div- 내용 읽기
textarea-내용 입력
--------------------------------------
** 여백 속성 **
    1. margin(밖)
    2. padding(안)

* margin
    1. 바깥쪽 여백(위치)
    2. margin-top /margin-right  /margin-bottom / margin-left
    3. margin: top right bottom left (시계방향)
       margin: top right bottom(same right)
       margin: top/bottom right/left
       margin: all
    4. margin: auto
    상하 여백 0, 좌우 여백 동일(블럭 요소 가운데 정렬)
    = margin: 0 auto

    * text-align: center
    인라인 요소 가운데 정렬
    width 쓰기!



*padding
    1. 안쪽 여백(크기)
    2. margin 사용법과 동일

    *box Width:800px
    -width:800px+padding:100px+ border:100px
    =800px(100+100)px+(100+100)px=1200px

    *box width:100%
    - width:100%+padding:100px +border:100px=100%+400px
    *box width:auto
    -width+padding+border=100%

    *box-sizing:border-box
    -width:80%; padding:100px; border:100px = 80%+400px
    width:80%; padding:100px; border:100px; box-sizing:border-box=80%

*float
    1.수직 구조의 요소를 수평 구조로 변경
    2. 요소의 레벨이 inline-block 형식으로 변경
    3. 수평으로 나열될 모든 요소에 float 속성 적용
    4. none/left/right
    5. 선택된 요소를 위로 띄우는 속성
    6. 위로 이동하면서 생긴 빈 자리에 다른 요소가 이동
    7. 자식 요소의 길이합이 부모 요소의 길이보다 길면
    부모 요소의 길이를 초과하는 요소들이 아래쪽으로 이동
    8. 형제와 부모 관계의 요소들끼리만 적용 
    9. 부모 요소는 float이 적용된 자식 요소의 높이 인식 못함

*clear
    1. float 속성 해제
    2. left/right/both

        css  공식
        p: A/F > float > m:A (+width, p:R)

        p: position
        A:absolute 
        F:fixed

        m: margin
        A:auto
        p:position
        R:relative
 
    자식이 float 부모에 height 안주고 overflow: hidden -> 기능 바뀜

--------------------------------------------------------------------
**position
    1. 움직이는 방법
    2. 위치 속성과 함께 사용

*위치 속성
    1. top / right / bottom / left
    2. position 속성이 없는 경우 이동 불가
    3. right, bottom은 relative인 경우 사용 불가

**position 속성값
    1. static: 기본값, 이동불가
    2. absolute: 절대 위치 지정, 형제 요소간 동일한 중심점 사용, 실제 위치 변경
    3. relative: 모든 요소가 독립된 중심점 사용, 중심점
    4. fixed: 스크린을 기준으로 지정된 위치에 고정


children                      parent
float             ->         height
position:absolute     ->      position:relative
-------------------------------------------------------------------------
** Flex ( Flexible Box, Flexbox )속성
    -컨테이너에 적용하는 속성
    -아이템(자식 요소)에 적용하는 속성

단점: 브라우저 호환성, 

*display flex; == float + parent : height  or  overflow : hidden

.container{
    display:flex;
    /* display: inline-flex */
}
    -아이템들이 가로 방향으로 배치
    - 내용물만큼 width적용( =inline )
    -아이템들의 height가 모두 컨테이너의 높이만큼으로 자동 적용
    ( float은 각각의 콘텐트만큼 높이 설정 )

* Flex container - 부모
    - flex의 영향을 받는 전체 공간

* flex item - 자식
    - 설정된 속성에 따라 각각의 아이템들이 어쩐 형태로 배치되는 것

    <div class="container">
        <div class="item">helloflex<div>
        <div class"item">abc</div>
        <div class"item">helloflex</div>
    </div>

* Flex 컨테이너 속성

* flex direction: 배치 방향 설정
    1. row:왼쪽부터 순차적 배치
    2. row-reverse:오른쪽부터 순차적 배치
    3. column:위에서 아래로 순차적 배치 
    4. column-reverse:아래에서 위로 순차적 배치

* flex-wrap: 줄넘김 처리 속성
    -아이템 줄바꿈 설정

    1. nowrap:줄바꿈을 하지 않음 
    2. wrap: 줄바꿈
    3. wrap-reverse: 역순으로 배치 후 줄바꿈

*flex-flow
    .container{
        flex-flow: row wrap;

        /*flex-direction:row;*/
        /*flex-wrap:wrap;*/
    }
    1. flex-direction과 flex-wrap을 한번에 지정
    2. flex-direction, flex-wrap의 순으로 공백으로 구분

*아이템 정렬
    1. justify:수평측 정렬
    2. align:수직측 정렬

*justify-content:메인측 방향 정렬
    -수평측 방향으로 아이템 정렬
    .container{
        justify-content:flex-start;
        /* justify-content: flex-end; */
        /* justify-content: center; */
        /* justify-content: space-between; */
        /* justify-content: space-around; */
        /* justify-content: space-evenly; */
    }

    1.flex-start(기본값): 아이템들을 시작점으로 정렬
        -flex-direction:row(왼쪽), column(위) 
    2.flex- end:아이템들을 끝점으로 정렬
        -flex-direction:row(오른쪽), column(아래)
    3. center:아이템들을 가운데로 정렬
    4. space-between:아이템들을 사이에 균일한 간격 생성
    5. space-around:각 아이템의 좌우에 균일한 간격 생성
    6. space-evenly:아이템들의 사이와 양 끝에 균일한 간격 생성
    7. IE와 엣지(Edge)지원 불가


*align-items:수직축 방향 정렬
- 수직축 방향으로 아이템 정렬

    .container{
        align-items:strecht;
        /*  align-items:flex-start; */
        /*  align-items: flex-end; */
        /*  align-items: center; */
        /*  align-items: baseline; */
    }
    1. strech( 기본값): 아이템들을 위아래 방향으로 끝까지 늘림.
    2. flex-start:아이템들을 위쪽으로 정렬
        - flex-direction: column인 경우
    3. flex-end: 아이템들을 아래쪽으로 정렬
        - flex-direction:column인 경우
    4. center: 아이템들을 중간 정렬
    5. baseline: 아이템들을 텍스트 베이스라인 기준으로 정렬

** 아이템 중간 정렬
    justify-content:center;
    align-item:center;

*align-content:여러 행 정렬
- flex-wrap:wrap이 설정된 상태에서 아이템들의 행이 2줄 이상인 경우 수직축 방향 정렬 지정

    .container{
        flex-wrap:wrap;
        align-content:strecht;
        /*  align-content:flex-start; */
        /*  align-content: flex-end; */
        /*  align-content: center; */
        /*  align-content: baseline; */
        /*align-content: space- between; */
        /*align-content: space-around; */
        /*align-content: space-evenly; */
    }
    1.strecht
    2.flex-start
    3.flex-end
    4.center
    5.space- between
    6.space-around
    7.space-evenly:MS 계열 브라우저(IE,엣지)에서 지원하지 않음

    *align-self
    -align-items로 교차축(cross axis) 아이템 정렬

    -align-items 속성보다 우선 적용
    -콘테이너 안의 모든 아이템에 적용
    -특정 아이템의 정렬을 따로 정할경우 align-self속성 사용
    -기본값은 auto로 align-items 속성의 값을 상속

        .container{
            flex-wrap:wrap;
            align-self:flex-start; 
            align-items:strecht;
            /*  align-items: flex-end; */
            /*  align-items: center; */
            /*  align-items: baseline; */
            /*  align-items:strecht; */
        }
1. auto
    - 부모 컨테이너의 align-items 속성을 상속 받음.
    - 부모 컨테이너가 없는 경우 align-strech 적용.

2. strech: 컨테이너에 맞게 변경
3. center:컨테이너 중심에 위치
4. flex-start: 컨테이너 앞단 부분에 위치
5. flex-end: 컨테이너 끝단 부분에 위치
6. baseline: 컨테이너의 기본선에 위치
7. initial: 이 속성의 기본값으로 설정
8. inherit: 부모 요소의 속성값 상속
---------------------------------------------------------------------------------

gif - 웹 전용 확장자.애니메이션 파일. 최대색상 수 256, 8bit 컬러 사용,  웹 안전컬러(216개)
jpeg - 24bit컬러 1만6천개 이상 색상,압축하는 기술 좋음, quality 작아질 수 록 화질 안좋음 80~100 사용 지금은 100 사용
png - 이미지의 투명한 부분 포함, 24로 사용

position absolute 많이 쓰면 성능 다운
margin top은 해당 모듈이 아닌 부모 모듈까지 내려오게 함
해결방법 - 상위 요소 또는 해당 속성이 float, position:absolute/fixed의 속성을 가지고 있으면 이슈 사라짐
         - 상위 요소가  border-top 속성을 가지고 있으면 해결
화면 전체 1개 크기 고정 박스 1개 총 2개의 박스 필요


자식요소들이 float이면 부모요소에게 높이 작성 또는 오버플로우 히든(잘 안씀)

자식요소들이 position:absolute이면 부모요소에게  position:relative(position요소가 없다면)


width:400px;일때

     
---------------------------------------------------
가운데 정렬
margin:auto  

or

position:absolute;
left:50%
margin-left:-200px(width/2)(좋은 방법은 x)
:가상클래스
::가상 클래스 요소
콘텐츠 길이가 길어져도 같은 위치- top
아니면 bottom

white-space:nowrap;
overflow: hidden;
text-overflow:ellipsis;
위의 효과는 텍스트가 한줄일때 적용 가능


동영상 퍼가기
iframe 에서 width 와 height iframeborder 지우고 css처리
padding은 이미지 움직임 x -> margin으로 해결

텍스트 관련 속성들은 상위요소에 넣으면 하위요소까지 다 적용 가능 but <a>링크는 적용 x
해결: a 클래스 따로 적용 or 초기화에서 color:inherit

background에서 숫자로 165px 작성하면 왼쪽부터 적용됨 
ex)   background: url(images/family_arrow.jpg) no-repeat 165px center;
      왼쪽에서 165px
      background: url(images/family_arrow.jpg) no-repeat 165px 200px center;
      왼쪽에서 165px 위에서 200px

태그 안됨
<ul> 태그 너비 미설정으로 인해 가끔 안 되는 경우 발생.

해결책: <ul> 요소 너비 설정, display:block or position:relative
---------------------------------------------------------------------------------------

* 자바스크립트
    1. 웹 브라우저에서 읽고 실행되는 언어
    2. 보안성이 없음
    3. html내에 작성
    4. 대소문자의 구분 엄격(aaa AAA)
    5. 한줄씩 차례대로 읽음 = (html): 인터프리터



* 적용 방법
1. 내부스크립트
 -html 문서 내에 스크립트 정의 후 직접 작성
 -필요한 위치에
    <script type="text/javascript">
    스크립트 효과
    </script>

2. 외부 스크립트
-스크립트 효과를 다른 문서에 작성하고 "이름.js"로 저장
-효과를 적용할 문서에
    <script type="text/javascript" src="이름.js">
    다른 문장 작성 금지
    </script>

*스크립트 주석
    1. //: 한 줄 주석
    2. /**/: 여러 줄 주석

***자료형(Data Type)***
연산에 사용되는 값의 종류

*상수: 값이 정해져 있는 형식
    1. 정수
        - 음수(-) 소수(.)를 제외한 양의 실수
        - 8진수 16진수 포함

    2. 실수
        - 실제 사용 가능한 모든 수 

    3. 문자형 상수 (String)
        - 일반적인 텍스트
        - "" 사용

    4. 불린(boolean)
        -true(1) / false(0)의 형식

    5. null
        - 값이 없음

*변수(variable)
    1. 변할 수 있는 값

    2. 값을 저장하는 장소나 이름

    3. 변수 선언문
        -var:변수 재선언& 변수 재할당 가능 , 생략 가능
            ex) var abc
        -let: 변수에 재할당 가능, 재선언 불가능
        -const: 변수 재선언, 변수 재할당 불가능

    4. 선언과 동시에 값 입력 가능
    ex) var abc=1

        var abc
        abc=1

        var a,b,C
        a=1
        b=2
        c=3

        var a,b,c,=1
        var a=b=c=1
        
        a=1 -> 1을 a에 저장한다.

    *var 변수이름 = 값

    **이름 규칙
        1. 알파벳, 숫자 사용 가능
        2. 한글, 특수문자 , 공백 사용 불가능
            (단, 특수문자 중 "_" 사용 가능)
        3. 첫번째 글자는 "_"또는 알파벳만 가능
        4. 대소문자 반드시 구분
        5. 에약어 사용 불가
        6, 가급적 이름만 보고도 변수의 용도를 이해할 수 있게 작성 
-----------------------------------------------------------------------
    **연산자**

    *산술 연산자*
    1. +
    2. -
    3. *
    4. / 
    5. % 두개의 수를 나눈 나머지
        10/3 =3.33334
        10%3=1

*연결 연산자

1. +: 연산자의 좌변과 우변의 값이 산술 연산이 불가능한 경우 두개의 값을 이어주는 연산자
    ex) 1+2=3 <---산술 연산이 가능하므로 "산술연산자"
    "a"+1=a1 <---- 두 개의 값을 연결하는 "연결 연산자" 

*비교 연산자: 결과값이 true / false로 출력
    1. >
    2. <
    3. == : "="는 저장의 의미. "=="는 비교의 의미
    4. <=
    5 >=
    6. != : != not 다르다(같지 않다)
        a==b 
        a!=b

---------------------------------------------------------------------------
**제어문**
해당 언어를 효율적으로 사용할 수 있도록 하는 문장
    1. 조건문
    2. 반복문

**반복문**
    1. 일정한 규칙을 가지고 있는 문장을 직접 작성하지 않고 여러번 실행시키는 문장
    2, 조건(배열, 숫자 범위) + 반복문
    3. for
    4. while
    5. do while

*while
1. 조건+반복문
2.while(조건){
        조건이 참인 동안 반복할 문장
}
"++" 

*for
1. 형식
    for (조건){
        ==for(시작값, 최종값, 증감식){
        --for(배열){
            조건이 참인 동안 반복할 문장
        
    }
2. 시작값 선언시 변수 선언과 동시에 사용 가능
    ex) 일반적인 사용 예
    var a=1
        b=2
        for(a=1;a<=10;a++){
            document.write(`무궁화 꽃이 피었습니다.`)
        }

    ex)for문의 사용 예
    for(var a=1; a<=10;a++){}
    for(a=1;a<=10;a++){}(var 생략)
    for(a=1,b=2;a<=10;a++){}



같은 문장 5
같은문장 수 나오게
1~10 합


2. 다중 반복문
    for(시작값, 최종값, 증감식){
        for(시작값, 최종값, 증감식){
            반복할 문장
        }
    }
------------------------------------------------------------------
**함수**
미리 약속되어 있는 명령어

    1. 내장 함수 - 만들어져 있는 명령어
    2. 사용자 정의 함수- 만들어서 사용하는 명령어


**대화 상자 함수**
-window 생략 가능-
    1. alert("문자열"): 메시지 상자
    2. confirm("문자열"): 확인/ 취소 선택 상자
    3. prompt("질문 메시지","초기 메시지"): 사용자 입력 상자

**조건문**
    1. 조건의 결과에 따라 다르게 문장을 실행
    2. if
    3.switch

*if문*
조건이 참인 경우 다음 문장을 실행
    1. if(조건) 조건이 참인 경우 실행할 문장

    2. if문의 다수 사용
        - 각각의 조건이 독립적

    3. 중괄호 사용
        - 여러 개의 문장을 하나의 조건문에 종속

    4. if~else
        -if(조건){
            조건이 참인 경우 실행할 문장
        }else{//if 조건이 참이 아닌 나머지 모두
        }
    
    5. if~ else if
        - if(조건1){
            조건 1이 참인 경우 실행할 문장
        }else if(조건 2){
            조건 1이 참이 아니고 조건 2가 참인 경우 실행할 문당
        }
    
    6. if~else if~else
        -if(조건1){
            조건1이 참인 경우 실행할 문장
        }else if{
            조건 1이 참이 아니고 조건 2가 참인 경우 실행할 문장
        }else{
            조건 1과 조건2가 참이 아닌 경우 실행할 문장
        }

    *switch문*
        switch(변수){
            case "값1" :변수값이 "값1"인 경우 실행할 문장
                break;
            case "값2" :변수값이 "값2"인 경우 실행할 문장
                break;
            case "값3" :변수값이 "값3"인 경우 실행할 문장
                break;
            default : 변수값이 "값1","값2","값3"이 아닌 경우 실행할 문장
        }
    
**사용자 정의 함수**
    1. 사용자가 임의로 생성한 함수
    2. 선언문:function
    3. function 함수멸(매개변수, 매개변수...){
        실행문
        실행문
        .
        .
    }
    4. 호출 시에만 실행
    5. 사용자 정의 함수 호출 방법
        -단독 실행
        -변수에 의한 실행
        -다른 함수에 의한 실행
        -이벤트에 의한 실행(****)
    6. 함수명 규칙: 변수명 규칙과 동일 

자바스크립트 시간 단워- 1000-> 1초

**이벤트**
    1. 언제
    2. 이벤트: 상황, ~~하다.
    3. 이벤트 핸들러: 이벤트 사용, ~~ 했을 때
        이벤트 앞에 on추가
        이벤트            이벤트 핸들러

        load                onload
        unload              onunload
        mouseover           onmouseover
        focus               onfocus
        blur                onblur
        click               onclick
        mousedown           onmousedown
        mouseup             onmouseup

**DOM(DOcument Object Model) 방식**
-html 요소에 접근하는 표준화된 방식
- 기존 name 속성과 태그별 접근 방식에서 벗어나 
    오브젝트의 종류에 상관없이 id속성을 사용하여
    요소에 접근하는 방식
*DOM 코어 / HTML-DOM :HTML요소들의 속성 제어
DOM코어 : 스크립트가 지원되느 모든 기기에서 사용
ex) Object.getAttribute("src")

HTML- DOM :웹 브라우저에서만 사용 가능
ex) object.src

*getElementBlyd("요소") 객체의 생성

웹페이지 개발 방식
-분리해서 개발
    1. 구조(Structure)- HTML
    2. 표현(Presentation)-CSS
    3. 동작(Behavior)-javascript

!important-- 무조건 우선순위


*이벤트 핸들러(이벤트 리스너, 이벤트 처리기)
1. 이벤트가 발생했을 때 그 처리를 담당하는 함수
2. 지정된 타입의 이벤트가 특정 요소에서 발생하면, 
웹 브라우저는 그 요소에 등록된 이벤트 핸들러 실행

ex) obj.addEventListener("이벤트", 실행할 함수);

**화살표(=>, ESB6)함수 **
1. 뚱뚱한 화살표(=>, ,arrow function)를 사용하여 함수 선언

2. ESS 일반 함수 선언
function(매개변수){
    실행할 문장
}
3. 화살표 함수
(매개변수)=>{
    실행할 문장
}
4. 매개변수가 하나인 경우()생략가능
매개변수=>{
    실행할 문장
}
5. 매개변수가 없는 경우 빈 괄호 사용
()=>{
    실행할 문장
}
6. 문법은 간단해지지만 공통된 규칙이나 일반적인 사용방법이 필요할 수 있음.


**제이쿼리: 자바스크립트 라이브러리**
 자바스크립트 코드를 간결한 상태로 개발이 가능

** 제이쿼리 특징**

    1. css 셀렉터
        html 내의 엘리먼트들을 손쉽게 표현 및 사용이 가능
    2, 플러그인 아키텍처
        이미 개발된 많은 플러그인을 쉽고 빠르게 사용
    3. 메소드 체인
        여러개의 기능을 한줄에 나열하여 불필요한 코드 반복을 줄임
    4, 크로스 브라우저
        브라우저별 발생 이벤트를 각각 지정해 줄 필요가 없음
**적용 방법**
<script type ="text/javascript" src = "제이쿼리 문서 경로"></script>

    1. local import
        - 파일을 다운로드 후 html문서에 임포트
        - js 파일을 항상 같이 이동
        - 한국 서버에 있는 js파일을 다른 나라의 사용자가 접속하려 할 경우 속도 저하 발생

    2. CDN(Content Delivery Network)
        - 특정 웹 사이트에서 제공하고 있는 파일을 링크
        - 웹 사용 불가 시 스크립트 동작 안됨
        - jquery
        .com / google.com / microsoft.com
**다운로드**
    j-Query Download
    http://jquery.com

    1. munified
        -파일을 최소화 시키기 휘새 불필요한 공백과 줄바꿈 생략
        -일반적으로 사용
    2. uncompressed
        -코멘트등 포함
        -코드 분석 시 사용

    *select ($()함수)
        jquery(선택자).메소드()
        $(선택자).메소드()

        $(누구한테).어떤효과를()
        $(누구한테).어떤효과를("")
        $(누구한테).어떤효과를({})
        $(누구한테).어떤효과를(function(){}))

        $(누구한테).어떤효과를().다른효과({}).다른효과(function(){})

    *ready() 메소드

        1. javascript의 window.onload 와 같은 기능이지만
        이 기능보다 정확하게 동작
        2. 스크립트가 먼저 작성되고 body요소가 나중에 작성되기 때문에
        스크립트 오류가 발생하는 것을 방지
        3, 문서내에 한번만 선언
        4, $(document).ready(function(){

        })

    *selector - Basic
        1. $("element")
            -특정 엘리먼트(태그) 적용
            ex) $("tr").addClass("blue")
        2. $("#id")
            -특정 아이디 지정
            ex) <a href = "#" id="test"> LINK</a>
        3. $("class")
            -특정 클래스 지정
            ex) <a href = "#" id ="class">LINK</a>
        $(".test").addClass("blue")

        4. $("selector1, selector2, selectorN")
            -다중 선택저, 여러 개의 선택자에 동시에 효과 적용
            ex) $("h2,h3, h4").addClass("pink");
            $("h2,#test, .hidden").addClass("pink");



--------------------------------------------------------------------------------
**DB접속 **
    mysql -h 호스트(DB위치) -u 시용자(아이디) -p비밀번호
    mysql -u root        

**DB 목록 확인**
    show databases;
    --권한이 없어서 일부 DB만 보여짐

**DB 선택**
    use DB명;

**table 목록 확인**
    show tables;

**table 구조 확인**
    desc[describe] 테이블명;

**user 확인**
    select Host,User,Password from mysql.user;

**사용자 추가 **
    create user 사용자명(아이디) @호스트명 identified by '비밀번호';
    따음표는 무조건 작은따음표('')

**계정정보(권한)**
    show grants for 사용자명@호스트명
    show grants for tester2@localhost;

**데이터베이스 생성:권한확인**
    create[객체][객체명];
    create database db명 ;
    create database notice;
    create database front;

***데이터베이스 목록 확인*
    show databases;

**데이터베이스 삭제**
    drop database front;

**사용자 삭제**
    drop user[사용자명@호스트명]
    drop user tester@localhost

**데이터베이스 선택**
    use DB명;
    use front;

***테이블 목록 확인*
    show tables;

**테이블 생성**
    create 테이블명(
        필드명 데이터타입(길이) 제약,
        필드명 데이터타입(길이) 제약,
        필드명 데이터타입(길이) 제약,
        추가 제약(기본키 설정, 문자셋, 외래키 등 )

    );
    create table members(
        idx int auto_increment primary key,
        u_name varchar(20) not null,
        u_id varchar(20) not null,
        pwd varchar(20) not null
    );

**테이블 구조 확인**
    desc 테이블명

**테이블 검색**
    select * from members;

**데이터 입력**
    insert into 테이블명 values('값1', '값2',,,,)
    insert into members values(1,'관리자','admin','1234');
    insert into members(u_name, u_id, pwd) values('홍길동','hong','1111');

    --------------------------------------------------------------------------------------------------------------------------** xmapp 실행 **
C:\xampp > xampp-control.exe 실행 > MySQL 항목 "start" 클릭


** 콘솔 실행 **
window key + R(실행)
cmd 입력 후 엔터


** 경로 이동 **
콘솔에
cd c:\xampp\mysql\bin 입력 후 엔터


** DB 접속 **
mysql -h 호스트(DB위치) -u 사용자(아이디) -p비밀번호
mysql -u root   ( ; <-- 생략 )


** DB 목록 확인 **
show databases;


** DB 선택 **
use [DB명];



*** sql 기본 쿼리 ***

** 실행문 **
1. DCL : 권한, 보안
2. DDL : 데이터베이스, 테이블
3. DML : 데이터 처리


** create : 생성 **
ex) create database [DB명];
    create table [테이블명] (
        필드명 데이터형식 제약,
        필드명 데이터형식 제약,
        필드명 데이터형식 제약
    );

create database exam;


** DB 목록 확인 **
show databases;


** Table 목록 확인 **
show tables;


create table notice(
    idx int auto_increment primary key,
    n_title varchar(100) not null,
    n_content varchar(255) not null,
    n_writer varchar(20)
);


** Table 목록 확인 **
show tables;


** Table 구조 확인 **
desc [테이블명];
desc notice;


** 데이터 검색 **
select * from members;


** alter : 수정 **
1. 데이터베이스, 테이블 수정(add, change, drop, modify, rename)
alter table [테이블명] add 필드명 타입 제약 after [필드명];

2. 데이터베이스 수정
alter database [DB명] CHARACTER SET=문자집합이름;
alter database [DB명] COLLATE=콜레이션이름;

alter database front character set=utf8;
alter database front collate=utf8_general_ci;

alter table members character set=utf8;
alter table members collate=utf8_general_ci;

select * from members; <-- 기존 데이터는 수정되지 않음

insert into members(u_name, u_id, pwd) values('이영희', 'yhlee', '2222');
select * from members;

3. alter table [테이블명] ADD [필드명 데이터타입];
   alter table [테이블명] DROP [필드명];
   alter table [테이블명] MODIFY COLUMN [필드명 데이터타입];

    alter table notice add n_date datetime;
    alter table notice drop n_date;
    alter table notice modify column n_content text;

    desc notice;


** drop : 삭제 **
ex) drop database [DB명];
    drop table [테이블명];

    drop table notice;
    show tables;

    drop database exam;
    show databases;

    drop database front;
    show databases;


** DB에 문자셋 설정하여 생성 **
create database [DB명]
default character set [문자셋]
default collate [콜레이트 이름];

create database front
default character set utf8
default collate utf8_general_ci;



* DB 선택 *
use front;

* 테이블 생성 : members *
create table members(
    idx int auto_increment primary key,
    u_name varchar(20) not null,
    u_id varchar(20) not null,
    pwd varchar(20) not null
);

* 데이터 입력(한글 데이터 포함) *
insert into members values(1, '관리자', 'admin', '1234');
insert into members(u_name, u_id, pwd) values('홍길동', 'hong', '1111');

* 데이터 확인(문자셋) *
select * from members;


** 데이터 형식 **
* 테이블 생성 *
create table 테이블이름(
    필드명 데이터형식 제약,
    필드명 데이터형식 제약,
    필드명 데이터형식 제약
);

* 숫자 타입 *
MySQL은 SQL 표준에서 지원하는 모든 숫자 타입 제공

1. 정수 타입 : TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT
2. 고정 소수점 타입 : DECIMAL
3. 부동 소수점 타입 : FLOAT, DOUBLE
4. 비트값 타입 : BIT(0, 1)

* 문자열 타입 *
1. CHAR(길이값) : 고정 길이 문자열
2. VARCHAR(길이값) : 가변 길이 문자열
3. BINARY(길이값)
4. VARBINARY(길이값)
5. BLOB
6. TEXT : 길이값 없음, 대소문자 구분
7. ENUM : 미리 정의한 집합 안의 데이터 중에 하나만 저장
8. SET : 미리 정의한 집합 안의 데이터 중에 여러 개 동시 저장

* 날짜, 시간 *
1. DATE
 - 날짜만 저장
 - 기본 형식 : 'YYYY-MM-DD'
 
2. DATETIME
 - 날짜 & 시간
 - 기본 형식 : 'YYYY-MM-DD HH:MM:SS'

3. DATE, DATETIME
 - 입력받은 데이터가 유효한 날짜와 시간이 아니면 0을 저장

4. TIME
 - 시간 저장
 - 기본 형식 : 'HH:MM:SS'

5. YEAR
 - 연도 저장
 - YEAR(2) : 2자리 연도
 - 문자열 '0' 또는 '00' : 2000년


** 제약(규칙) **
* 테이블 생성 *
create table 테이블이름(
    필드명 데이터형식 제약,
    필드명 데이터형식 제약,
    필드명 데이터형식 제약
);

* 제약 *
1. not null : 빈 값 허용 안함
2. default : 기본값 적용
3. unique : 중복된 값 허용 안함
4. check : 지정된 값만 허용
5. auto_increment : 자동 증가
6. primary key : 기본 키 설정
7. foreign key : 참조 키 설정


*** DML 쿼리 ***

* 테이블 설계 *
===================================
게시판 : board
------------------------------------------------------------
항목 | 열이름 | 데이터타입(길이) | 제약
------------------------------------------------------------
일련번호 |  idx          |  int              |  PK, AI
이름       |  u_name    |  varchar(20)   |  NN
아이디    |  u_id         |  varchar(20)   |  NN
비밀번호 |  pwd         |  varchar(20)   |  NN
전화번호 |  phone_no |  varchar(15)    |  
이메일    |  email       |  varchar(50)    |  
생년월일 |  birth        |  date            |  
성별       |  gender     |  char(1)         |  
주소       |  addr        |  varchar(100)  |  

* 테이블 생성 *
drop table if exists new_members;
create table new_members(
    idx int auto_increment primary key,
    u_name varchar(20) not null,
    u_id varchar(20) not null,
    pwd varchar(20) not null,
    phone_no varchar(15),
    email varchar(50),
    birth date,
    gender char(1),
    addr varchar(100)
);


** insert : 데이터 입력 **
1. 모든 필드에 데이터 입력
insert into [테이블명] values('값', '값', ,,,,);
-- 모든 필드에 값을 입력하는 경우 테이블명 옆에 필드명 생략
insert into new_members values(1, '관리자', 'admin', '1234', '01011112222', 'admin@abc.com', '2001-10-25', '남', '서울시 강남구 역삼동');
select * from new_members;

2. 일부 필드에 데이터 입력
insert into [테이블명](필드명1, 필드명2, ,,,필드명N) values('값1', '값2', ,,,'값N');
-- 필드명 개수와 값의 개수가 반드시 일치해야 함
insert into new_members(u_name, u_id, pwd) values('홍길동', 'hong', '1111');


** select : 데이터 검색 **
    1. 단일 필드 검색
        select [필드명] from [테이블명];
        select u_name from new_members;

    2. 여러 필드 검색
        select [필드명], [필드명], ,,,,, from [테이블명];
        select u_name, u_id from new_members;

    3. 모든 필드 검색
        select *(all) from [테이블명];
        select * from new_members;

    4. 전체 행의 개수 출력
        select count(*) from [테이블명];
        select count(*) from new_members;

    5. 중복값 제외 검색
        select distinct [필드명] from [테이블명];
        select distinct gender from new_members;

    6. 필드명(별칭) 변경 : 출력시에만 변경
        select [필드명] as [보여질 필드명] from [테이블명];
        select u_name as '이름' from new_members;
        select count(*) as '전체 데이터' from new_members;


** where : 조건절 **
    1. 특정 필드에서 특정한 값을 가진 전체 데이터 검색
        select * from [테이블명] where [필드명=값];
        select * from new_members where idx=22;

    2. 특정 필드에서 특정한 값을 가진 일부 데이터 검색
        select [필드명], [필드명] ,,, from [테이블명] where [필드명=값];
        select idx, u_name, u_id from new_members where idx=22;

3. 수정, 삭제시에도 사용


** 실습 **
    1. "남" 또는 "여"만 선택
        select u_name, gender from new_members where gender='여';
        select u_name, gender from new_members where gender='남';

    2. 서울 지역 거주자만 선택
        select u_name, addr from new_members where addr='서울'; (X)


** 연산자 **
    1. +, -, *, /
    2. &&, ||
    3. not
    4. =, !=, >, <, =<, =>

5. in : 입력된 값들만 선택
    select [필드명] from [테이블명] where [필드명] in(값, 값, 값, ...);
    select idx, u_name from new_members where idx in(22, 24, 26);

6. between A and B : 범위 검색
    select [필드명] from [테이블명] where [필드명] between A and B;
    select idx, u_name from new_members where idx between 22 and 30;
    select idx, u_name, birth from new_members where birth between '1990-01-01' and '1995-12-31';

7. like, %(all) : 문자열 검색
    select [필드명] from [테이블명] where [필드명] like '문자열'
    select [필드명] from [테이블명] where [필드명] like '문자열%'
    select [필드명] from [테이블명] where [필드명] like '%문자열'
    select [필드명] from [테이블명] where [필드명] like '%문자열%'
    select u_name, addr from new_members where addr='서울'; (X)
    select u_name, addr from new_members where addr like '%서울%';


** order by : 정렬 **
    1. asc : 오름차순(기본값, 생략가능)
    2. desc : 내림차순

    select [필드명] from [테이블명] order by [필드명 정렬방법]
    select [필드명] from [테이블명] order by [필드명 정렬방법], [필드명 정렬방법]
    select [필드명] from [테이블명] where절 order by [필드명 정렬방법]

select idx, u_name from new_members where idx between 22 and 30 order by idx desc;


** update : 데이터 수정 **
1. 단일 필드 수정
update [테이블명] set [수정할 필드=수정할 값];
update new_members set addr='서울';

2. 여러 필드 수정
update [테이블명] set [수정할 필드=수정할 값], [수정할 필드=수정할 값] ,,,,,;
update new_members set u_id='hong', pwd='1234';

3. 특정 데이터 수정
update [테이블명] set [수정할 필드=수정할 값] where [필드명=값];
update new_members set addr='경기' where idx=22;


** delete : 데이터 삭제 **
    1. 모든 행 삭제
        delete from [테이블명];
        delete from new_members;

    2. 특정 행 삭제
        delete from [테이블명] where [필드명=값];
        delete from new_members where idx=22;


** 사용자 추가 **
    create user [사용자명@호스트] identified by [비밀번호]
    create user tester@localhost identified by '1111';

** 사용자 확인 **
    select host, user, password from mysql.user;


** 계정 정보 확인 **
    show grants for [사용자명@호스트]
    show grants for tester@localhost;

** DB 종료 **
    exit;

** 새 사용자 로그인 **

    mysql -u [사용자명] -p[비밀번호]
    mtsql -u tester -p1111


**테이블 생성
create table ex_table(
    idx int,
    u_name varchar(10)
);
  insert into members values(3, '영희', '2222');

  update members set u_name='김철수' where idx=2;
  delete from members where idx=2;


  **권한부여**
  grant [권한 종류] on [DB명.테이블명] to [사용자명@호스트] with grant option;

  ex) tester에게 fornt DB에 있는 members 테이블에 insert 권한 부여
  grant insert on fornt.members to tester@localhost with grant option;

ex) tester에게 모든 DB에 모든 권한 부여
grant all on *.* to tester@localhost with grant option;


**권한 회수**
    revoke [권한 종류] on [DB명.테이블명] from [사용자명@호스트];
    ex) tester의 모든 권한 회수 

    revoke all on *.* from tester@localhost;

*DB 종료*
*root 로그인*
*권한 삭제*
*DB 종료*
*tester 로그인*
*db목록확인*

*사용자 삭제*
    drop user [사용자명@호스트];
    drop user tester@localhost;

** 데이터 준비 **
    * new_members 테이블 삭제
    * new_members 생성
    * 데이터 입력
----------------------------------------------------------------------------------트랜잭션---
** 트랜잭션 : 복원 시점 만들기 **
    1. start transaction : 트랜잭션 시작
    2. savepoint [이름] : 복원 시점 저장
    3. rollback [이름]: 해당 시점으로 복원
    rollback : 트랜잭션 시작 시점으로 복원


* 현재 상태를 복원 시점으로 저장 *
    start transaction;
    savepoint a; --모든 데이터가 존재

* 모든 성별을 '남' 또는 '여' 로 변경 *
    update new_members set gender='남';
    select * from new_members;

* 모든 성별을 '남' 또는 '여'로 변경된 시점을 b라는 이름으로 저장 *
    savepoint b;    

* idx 1~10 삭제 * 
    delete from new_members where idx between 1 and 10;
    select * from new_members;

* idx 1~10 삭제된 시점을 c라는 이름으로 저장 *
    savepoint c;

* 전체 데이터 삭제 *
    delete from new_members;

* idx 1~10 삭제된 시점으로 복구 *
    rollback to c;
    select * from new_members;

* idx 1~10 삭제되기 이전 시점으로 복구 *
    rollback to b;
    select * from new_members;

--------------------------------------------------------------------------------------------------------------------------------------
                                                               ** UI 설계 **  -- 회원가입
--------------------------------------------------------------------------------------------------------------------------------------

** UI 설계: 회원관리 **
    * vscode root 디렉토리 *
        1.c:\xampp\htdocs

    * 사용 디렉토리 *
        1.c:\xampp\htdocs\web_project

    * 준비사항 *
        1. c:\xampp\xampp-controll.exe 실행
        2. Apache, MY-SQL 실행

    * 로컬 사이트 주소 *
        1. http://localhost 또는 http://127.0.0.1
        2. web_project주소 : http://localhost/web_project


    * 디렉토리 구성 *
        1. 프로젝트 디렉토리: web_project
        2. 회원가입/수정/탈퇴 : web_project/members
        3. 로그인/로그아웃 : web_project/login
        4. 공통파일 : web_project/inc
        5. 관리자 페이지 : web_porject/admin
        6. 관리자 - 회원관리 : web_porject/admin/members


---------------------------------------------------------------------------------------------------------
    * 페이지 구성 : 메인 페이지 *
        1. web_project/index.html
         

    * 페이지 구성 : 회원 정보 *
        1. 회원가입 페이지
        web_project/members/join.php

        2. 회원가입 처리 페이지
        web_project/members/insert.php

        3. 가입 완료 페이지
        web_project/members/welcome.php

        4. 정보수정
        web_porject/members/member_info.php

        5. 정보 수정 처리
        web_porject/members/edit.php

        6. 정보 삭제
        web_porject/members/mem_delete.php

        7. 삭제 완료 페이지
        web_porject/members/delete_ok.php

        8. 아이디 중복 검사 입력
        id_search.php

        9. 아이디 중복 검사
        id_serach_result.php
        
     
        

    *---------------------------------------------------------------------------------------------공통 파일------------*
    * 공통 파일 *
        *1.DB 연결 객체 *
        web_project/inc/dbcon.php

        *2.세션객채*
        web_porject/inc/session.php

        3. 로그인 체크
        web_porject/inc/login_check.php

    -----------------------------------------------------------------------------

    * 로그인 : web_porject/login *
        1. 로그인
        web_project/login/login.php

        2. 로그인 처리
        web_project/login/login_ok.php

        3. 로그아웃
        web_porject/login/logout.php
    
    
    -----------------------------------------------------------------------------

    * 관리자 페이지:web_porject/admin
    admin.php
    *관리자 로그인 : web_porject/admin/login
        1. 로그인
        login.php
        
        2. 로그인 처리
        login_ok.php
        3. 로그아웃
        logout.php
    * 관리자 회원관리: web_porject/admin/members *

        1. 회원 목록
        list.php

        2. 회원가입 처리 페이지
        insert.php

        3. 가입 완료 페이지
        welcome.php

        4. 정보수정
       member_info.php

        5. 정보 수정 처리
       edit.php

        6. 정보 삭제
       mem_delete.php

        7. 삭제 완료 페이지
       delete_ok.php

        8. 아이디 중복 검사 입력
        id_search.php

        9. 아이디 중복 검사
        id_serach_result.php

    -----------------------------------------------------------------------------
    * 입력 항목 *
    -------------------------------------------------
    항목 | 요소 | type | value | name | id | class | 제약
    -------------------------------------------------
    이름 | input | text | | u_name | u_name | u_name | 필수입력
    아이디 | input | text | | u_id | u_id | u_id | 필수입력, 4~12 글자
    아이디 중복확인 | button | button | | | | | 팝업창 출력
    비밀번호 | input | password | | pwd | pwd | pwd | 필수입력, 4~12 글자(,정규식)
    비밀번호 확인 | input | password | | re_pwd | re_pwd | re_pwd | 비밀번호와 값 동일
    전화번호 | input | text | | moblie | moblie | moblie | 숫자만 입력
    생년월일 | input | text | | birth | birth | birth | 8라지 숫자
    이메일 아이디 | input | text | | email_id | email_id | email_id | 
    이메일 도메인 | input | text | | email_dns | email_dns | email_dns | 
    도메인 선택 | select | | | email_sel | email_sel | email_sel | 항목 선택시 도메인 입력
    도메인 항목: 직접입력 | option | | | | |
    도메인 항목: 네이버 | option | | naver.com | | |
    도메인 항목: 다음 | option | | daum.com | | |
    도메인 항목: 구글 | option | | google.com | | |
    우편번호 | input | text | | ps_code | ps_code | ps_code | 
    주소 검색 | button | button | | | | | 팝업창 출력
    기본주소 | input | text | | addr_b | addr_b | addr_b | 
    상세주소 | input | text | | addr_d | addr_d | addr_d | 
    성별:남 | input | radio | m | gender | male | gender | 
    성별:여 | input | radio | f | gender | female | gender | 
    약관동의 | input | checkbox | y | apply | apply | apply | 필수체크
    이전으로 | button | button | | | | | 이전페이지로 이동
    가입하기 | button | submit | | | | | 
    
    * 데이터 베이스 생성 *
    DB명 : front

    create database front
    default character set utf8
    default collate utf8_general_ci;

    create database everland
    default character set utf8
    default collate utf8_general_ci;

    ** 테이블 설계 **
    Table명 : members


    ---------------------------------------------------------------
    항목 | 필드명 | 데이터타입(길이) | 제약
    ---------------------------------------------------------------
    create table members(
        idx int auto_increment primary key,
        u_name varchar(30) not null,
        u_id varchar(20) not null,
        pwd varchar(20) not null,
        mobile varchar(15),
        birth date, 
        email varchar(50), 
        ps_code char(5),
        addr_b varchar(100),
        addr_d varchar(100),
        gender char(1),
        reg_date datetime
    );


    * 테이블 삭제
    drop table if exist members;

    * 관리자 입력 *
    insert into members(
        u_name,u_id,pwd,
        mobile,birth, email, 
        ps_code,addr_b,addr_d,
        gender,reg_date
    ) values(
        '관리자','admin','1234',
        '01011112222','20221031','admin@abc.com',
        '12345','서울시 강남구 역삼동','만이빌딩 5F',
        'm','2020-10-30'
    );

    * 데이터 검색
    select * from members;
    
    ** 개발 준비 **
    1. c:\xampp\xampp-controll.exe실행
    2. 윈도우 사용자 + MySQL 설치된 경우
    - Ctrl+Alt+Del 작업관리자 ->mysqld 종료
    3. 아파치, mysql 시작
    4. 
*** UI 설계 : 공지사항 ***

================================================

** vscode root 디렉토리 **
1. c:\xampp\htdocs

================================================

** 사용 디렉토리 **
1. c:\xampp\htdocs\web_project

================================================

** 준비사항 **
1. c:\xampp\xampp-controll.exe 실행
2. Apache, My-SQL 실행

================================================

** 로컬 사이트 주소 **
1. http://localhost 또는 http://127.0.0.1
2. web_project 주소 : http://localhost/web_project

================================================

* 디렉토리 구성 *
1. 프로젝트 디렉토리 : web_project
2. 공지사항 : web_project/notice
3. 로그인/로그아웃 : web_project/login
4. 공통파일 : web_project/inc
5. 관리자 페이지 : web_project/admin
6. 관리자 회원관리 : web_project/admin/notice

===================================================================================
                                        UI 설계 - 공지사항
========================================================================================

** 페이지 구성 **
* 메인 페이지
web_project/index.html

---------------------------------------------------------------------------------

* 공지사항 : web_project/notice

1. 글 쓰기 : write.php

2. 글 쓰기 처리 페이지 :insert.php

3. 목록 페이지 : list.php

4. 내용 보기 : view.php

5. 글 수정 : modify.php

6. 글 수정 처리 : edit.php

7. 글 삭제 : delete.php

---------------------------------------------------------------------------------

* 공통 파일 : web_project/inc
1. DB 연결 객체
dbcon.php

2. 세션 객체
session.php

3. 관리자 로그인 체크
admin_check.php

================================================

* 입력 항목 *
---------------------------------------------------------------------
항목 | 요소 | type | value | name | id | class | 제약
---------------------------------------------------------------------
제목 | input | text |  | n_title | n_title | n_title | 필수입력
내용 | textarea |  |  | n_content | n_content | n_content | 필수입력

================================================

** 데이터 베이스 설계 **
DB명 : front


* DB 목록 확인
show databases;


* DB 삭제
drop database front;


* DB 생성
create database front
default character set utf8
default collate utf8_general_ci;

================================================

** 테이블 설계 **
Table명 : notice
-------------------------------------------------------------------
항목 | 필드명 | 데이터타입(길이) | 제약
-------------------------------------------------------------------
인덱스 | idx | int | AI, PK
제목 | n_title | varchar(255) | NN
내용 | n_content | text | NN
작성자 | writer | varchar(20) | NN
작성일자 | w_date | datetime | NN
조회수 | cnt | int | default 0


* DB 선택
use front;


* 테이블 목록 확인
show tables;


* 테이블 삭제
drop table if exists notice;


* 테이블 생성 : notice;
create table notice(
    idx int auto_increment primary key,
    n_title varchar(255) not null,
    n_content text not null,
    writer varchar(20) not null,
    w_date datetime not null,
    cnt int default 0
);


* 테이블 목록 확인
show tables;

* 테이블 구조 확인
desc notice;
====================================================================================
*** UI 설계 : 공지사항 - 파일첨부 ***

================================================

* 디렉토리 추가

1. root 디렉토리에 "data" 폴더 추가

2. 폴더에 쓰기 권한 설정

================================================

* form 요소 enctype 추가

1. HTML 폼을 POST 방식으로 전송할 때
<input type="file">이 포함된 폼을 전송하기 위한 
인코딩 타입 명시

2. <form>요소에
- enctype="multipart/form-data" 추가

================================================

* 공지사항 : web_project/notice

1. 글 쓰기 : write.php -- 수정

2. 글 쓰기 처리 페이지 : insert.php -- 수정

3. 목록 페이지 : list.php -- 수정

4. 내용 보기 : view.php

5. 글 수정 : modify.php -- 수정

6. 글 수정 처리 : edit.php -- 수정

7. 글 삭제 : delete.php

---------------------------------------------------------------------------------

* 공통 파일 : web_project/inc
1. DB 연결 객체
dbcon.php

2. 세션 객체
session.php

3. 관리자 로그인 체크
admin_check.php

================================================

* 입력 항목 *
---------------------------------------------------------------------
항목 | 요소 | type | value | name | id | class | 제약
---------------------------------------------------------------------
제목 | input | text |  | n_title | n_title | n_title | 필수입력
내용 | textarea |  |  | n_content | n_content | n_content | 필수입력
첨부파일 | input | file |  | up_file | up_file | up_file -- 추가

================================================

** 데이터 베이스 설계 **
DB명 : front

** 테이블 설계 **
Table명 : notice
-------------------------------------------------------------------
항목 | 필드명 | 데이터타입(길이) | 제약
-------------------------------------------------------------------
인덱스 | idx | int | AI, PK
제목 | n_title | varchar(255) | NN
내용 | n_content | text | NN
작성자 | writer | varchar(20) | NN
작성일자 | w_date | datetime | NN
파일명 | f_name | varchar(50) | 
파일형식 | f_type | varchar(50) | 
파일용량 | f_data | varchar(50) | 
조회수 | cnt | int | default 0


* 테이블 수정
alter table notice add column f_name varchar(50) after w_date;
alter table notice add column f_type varchar(50) after f_name;
alter table notice add column f_data varchar(50) after f_type;


* 테이블 목록 확인
show tables;


* 테이블 구조 확인
desc notice;